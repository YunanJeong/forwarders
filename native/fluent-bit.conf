[SERVICE]
    # Flush
    # =====
    # set an interval of seconds before to flush records to a destination
    flush        1

    # Daemon
    # ======
    # instruct Fluent Bit to run in foreground or background mode.
    daemon       Off          # systemd로 제어시 비활성화

    # Log_Level
    # =========
    # Set the verbosity level of the service, values can be:
    #
    # - error
    # - warning
    # - info
    # - debug
    # - trace
    #
    # by default 'info' is set, that means it includes 'error' and 'warning'.
    log_level    warning      # 서버 부하 경감을 위해 최소한의 로그만 찍기

    # Parsers File
    # ============
    # specify an optional 'Parsers' configuration file
    parsers_file parsers.conf

    # Plugins File
    # ============
    # specify an optional 'Plugins' configuration file to load external plugins.
    plugins_file plugins.conf

    # HTTP Server
    # ===========
    # Enable/Disable the built-in HTTP Server for metrics
    http_server  Off
    http_listen  0.0.0.0
    http_port    2020

    # Storage
    # =======
    # Fluent Bit can use memory and filesystem buffering based mechanisms
    #
    # - https://docs.fluentbit.io/manual/administration/buffering-and-storage
    #
    # storage metrics
    # ---------------
    # publish storage pipeline metrics in '/api/v1/storage'. The metrics are
    # exported only if the 'http_server' option is enabled.
    #
    storage.metrics on

    # storage.path
    # ------------
    # absolute file system path to store filesystem data buffers (chunks).
    #
    storage.path /tmp/storage  # 디스크 버퍼 최소설정 storage.path와 각 input/output 플러그인에서 

    # storage.sync
    # ------------
    # configure the synchronization mode used to store the data into the
    # filesystem. It can take the values normal or full.
    #
    # 단, 1건도 유실되면 안되는 경우 full로 설정. 부하 대폭증가 (CPU, 디스크IOPS, 디스크 쓰기 수) 
    # 보통 normal해도 문제 없음
    storage.sync full   # 디스크 버퍼 사용시, 메모리에 있는걸 디스크 파일로 "확정(fsync)"하는 순간에 대한 문제

    # storage.checksum
    # ----------------
    # enable the data integrity check when writing and reading data from the
    # filesystem. The storage layer uses the CRC32 algorithm.
    #
    # storage.checksum off

    # storage.backlog.mem_limit
    # -------------------------
    # if storage.path is set, Fluent Bit will look for data chunks that were
    # not delivered and are still in the storage layer, these are called
    # backlog data. This option configure a hint of maximum value of memory
    # to use when processing these records.
    #
    # storage.backlog.mem_limit 5M  # 메모리 버퍼 한도. 초과시 디스크 버퍼로 보냄 (디스크버퍼 활성화시)

# 파일 읽기
[INPUT]
    Name tail                                 # https://docs.fluentbit.io/manual/pipeline/inputs/tail
    Path /data/log/tlog/*/*.log         
    Tag fltb.forward                          # fluent 플랫폼 내부에서 메시지 라우팅을 위해 사용하는 태그 
    # Parser json  # Parser 없이 그대로 포워딩할꺼임. 파일 로그라인이 깨져도 그대로 전송 후 타당성체크를 다운스트림 플랫폼에서 처리

    read_from_head true                       # 파일 처음부터 수집 시작 # 기존 DB파일 있을시 무시됨
    db /var/log/fluent-bit-buffers/tail.db    # 오프셋 저장용 내부 DB파일 활성화 및 경로 지정 → 재시작 시 위치 복구

    Path_Key file                             # 읽은 파일경로 정보를 메시지 필드에 추가 (필드명: file)

# fluentbit or fluentd로 보냄(Tag가 유지)
[OUTPUT]
    name forward
    match *
    Host localhost
    Port 24224